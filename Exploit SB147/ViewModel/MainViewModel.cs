using Exploit_SB147.Model;
using Exploit_SB147.View;
using Exploit_SB147.Tool;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Input;
using System.Drawing;

namespace Exploit_SB147.ViewModel
{
  class MainViewModel : INotifyPropertyChanged
  {
    #region Mécanisme INotifyPropertyChanged
    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    #endregion

    public MainViewModel()
    {
      //Initialisation de l'affichage des pages
      ActivPages = new ObservableCollection<bool>();
      VisibleMenuBouton = new ObservableCollection<string>();
      for (int i = 0; i < NbPages; i++)
      {
        ActivPages.Add(false);
        VisibleMenuBouton.Add("Hidden");
      }
      ActivPages[0] = true;
      VisibleMenuBouton[0] = "Visible";
      TitrePageActiv = "Importation des mesures";
      Conformite = "_";
      ConformiteCouleur = "Black";
      OffsetConsigne = -30;
      IsLoading = "Hidden";

      //Initialisation du journal
      Journal = DateTime.Now.ToString("HH:mm") + " : Logiciel démarré version 0.6.0.0";
      

      //initialisation des consignes
      ConsigneAmplitude = new ObservableCollection<double>();
      
      ConsigneFrequence = new ObservableCollection<double>();
      ConsigneFrequence.Add(0.086);
      ConsigneFrequence.Add(0.215);
      ConsigneFrequence.Add(0.430);
      ConsigneFrequence.Add(0.860);
      ConsigneFrequence.Add(1.290);
      ConsigneFrequence.Add(1.720);
      ConsigneFrequence.Add(2.580);
      ConsigneFrequence.Add(3.441);
      ConsigneVitesse = new ObservableCollection<double>();
      for (int i = 0; i < 8; i++)
      {
        ConsigneAmplitude.Add(74);
        ConsigneVitesse.Add(Math.Round(ConsigneAmplitude[i] * ConsigneFrequence[i] * Math.PI));
      }

      //Tolérances
      GraphLEVTolerance = new Graphique();
      ToleranceDetenteMin = new ObservableCollection<double>();
      ToleranceDetenteMin.Add(14420);
      ToleranceDetenteMin.Add(22453);
      ToleranceDetenteMin.Add(24390);
      ToleranceDetenteMin.Add(26788);
      ToleranceDetenteMin.Add(28747);
      ToleranceDetenteMin.Add(31190);
      ToleranceDetenteMin.Add(34806);
      ToleranceDetenteMin.Add(37399);
      ToleranceDetenteMax = new ObservableCollection<double>();
      ToleranceDetenteMax.Add(29727);
      ToleranceDetenteMax.Add(37214);
      ToleranceDetenteMax.Add(38881);
      ToleranceDetenteMax.Add(42126);
      ToleranceDetenteMax.Add(44775);
      ToleranceDetenteMax.Add(48081);
      ToleranceDetenteMax.Add(52973);
      ToleranceDetenteMax.Add(56482);
      ToleranceCompressionMin = new ObservableCollection<double>();
      ToleranceCompressionMin.Add(-11777);
      ToleranceCompressionMin.Add(-13382);
      ToleranceCompressionMin.Add(-14606);
      ToleranceCompressionMin.Add(-17227);
      ToleranceCompressionMin.Add(-19440);
      ToleranceCompressionMin.Add(-21440);
      ToleranceCompressionMin.Add(-25203);
      ToleranceCompressionMin.Add(-28226);
      ToleranceCompressionMax = new ObservableCollection<double>();
      ToleranceCompressionMax.Add(-21816);
      ToleranceCompressionMax.Add(-23988);
      ToleranceCompressionMax.Add(-25644);
      ToleranceCompressionMax.Add(-29189);
      ToleranceCompressionMax.Add(-32184);
      ToleranceCompressionMax.Add(-34889);
      ToleranceCompressionMax.Add(-39980);
      ToleranceCompressionMax.Add(-44071);

      for(int i = 0; i < 17; i++)
      {
        if (i < 8)
        {
          TableauToleranceVitesse[i] = -ConsigneVitesse[7 - i];
          TableauToleranceMin[i] = ToleranceCompressionMin[7 - i];
          TableauToleranceMax[i] = ToleranceCompressionMax[7 - i];
        }
        else if (i == 8)
        {
          TableauToleranceVitesse[i] = 0;
          TableauToleranceMin[i] = 0;
          TableauToleranceMax[i] = 0;
        }
        else
        {
          TableauToleranceVitesse[i] = ConsigneVitesse[i-9];
          TableauToleranceMin[i] = ToleranceDetenteMin[i - 9];
          TableauToleranceMax[i] = ToleranceDetenteMax[i - 9];
        }
      }
      GraphLEVTolerance.Graph.plt.PlotScatter(TableauToleranceVitesse, TableauToleranceMin, label: "LEV", markerSize: 5,markerShape: ScottPlot.MarkerShape.openCircle, color: System.Drawing.Color.OrangeRed);
      GraphLEVTolerance.Graph.plt.PlotScatter(TableauToleranceVitesse, TableauToleranceMax, label: "LEV", markerSize: 5, markerShape: ScottPlot.MarkerShape.openCircle, color: System.Drawing.Color.OrangeRed);
      ConfigGraph(GraphLEVTolerance, "LEV", "Vitesse (mm/s)", "Effort (N)");


    }

    #region Variables
    /* Modèle variable
    //Description de la variable
    private string nomVariable;
    public string NomVariable { get => nomVariable; set { nomVariable = value;OnPropertyChanged("NomVariable"); } }

    */

    private string journal;
    public string Journal { get => journal; set { journal = value; OnPropertyChanged("Journal"); } }
    private ObservableCollection<double> consigneAmplitude;
    public ObservableCollection<double> ConsigneAmplitude { get { return consigneAmplitude; } set { consigneAmplitude = value; OnPropertyChanged("ConsigneAmplitude"); } }
    private ObservableCollection<double> consigneFrequence;
    public ObservableCollection<double> ConsigneFrequence { get { return consigneFrequence; } set { consigneFrequence = value; OnPropertyChanged("ConsigneFrequence"); } }
    private ObservableCollection<double> consigneVitesse;
    public ObservableCollection<double> ConsigneVitesse { get { return consigneVitesse; } set { consigneVitesse = value; OnPropertyChanged("ConsigneVitesse"); } }
    private Graphique graphLEVTolerance;
    public Graphique GraphLEVTolerance { get => graphLEVTolerance; set { graphLEVTolerance = value; OnPropertyChanged("GraphLEVTolerance"); } }
    private ObservableCollection<double> toleranceDetenteMin;
    public ObservableCollection<double> ToleranceDetenteMin { get { return toleranceDetenteMin; } set { toleranceDetenteMin = value; OnPropertyChanged("ToleranceDetenteMin"); } }
    private ObservableCollection<double> toleranceDetenteMax;
    public ObservableCollection<double> ToleranceDetenteMax { get { return toleranceDetenteMax; } set { toleranceDetenteMax = value; OnPropertyChanged("ToleranceDetenteMax"); } }
    private ObservableCollection<double> toleranceCompressionMin;
    public ObservableCollection<double> ToleranceCompressionMin { get { return toleranceCompressionMin; } set { toleranceCompressionMin = value; OnPropertyChanged("ToleranceCompressionMin"); } }
    private ObservableCollection<double> toleranceCompressionMax;
    public ObservableCollection<double> ToleranceCompressionMax { get { return toleranceCompressionMax; } set { toleranceCompressionMax = value; OnPropertyChanged("ToleranceCompressionMax"); } }
    public double[] TableauToleranceVitesse = new double[17];
    public double[] TableauToleranceVitesseB;
    public double[] TableauToleranceMin = new double[17];
    public double[] TableauToleranceMax = new double[17];
    private ObservableCollection<double> resultatsLEVMesure;
    public ObservableCollection<double> ResultatsLEVMesure { get { return resultatsLEVMesure; } set { resultatsLEVMesure = value; OnPropertyChanged("ResultatsLEVMesure"); } }
    public string ResultatLEVACopier;
    private string conformite;
    public string Conformite { get => conformite; set { conformite = value; OnPropertyChanged("Conformite"); } }
    private string conformiteCouleur;
    public string ConformiteCouleur { get => conformiteCouleur; set { conformiteCouleur = value; OnPropertyChanged("ConformiteCouleur"); } }
    private ObservableCollection<string> conformiteParPoint;
    public ObservableCollection<string> ConformiteParPoint { get { return conformiteParPoint; } set { conformiteParPoint = value; OnPropertyChanged("ConformiteParPoint"); } }
    private double offsetConsigne;
    public double OffsetConsigne { get => offsetConsigne; set { offsetConsigne = value; OnPropertyChanged("OffsetConsigne"); } }

    #endregion

    #region Commandes
    /* Modèle de commande
     //Description de la commande
    private RelayCommand testCommand;
    public ICommand TestCommand { get { if (testCommand == null) { testCommand = new RelayCommand(param => OnTestCommand(), param => true); } return testCommand; } }
    public void OnTestCommand()
    {
      
    }     
    */


    #endregion

    #region Calcul consigne vmax

    //private RelayCommand calculConsigneVmax;
    //public ICommand CalculConsigneVmax { get { if (calculConsigneVmax == null) { calculConsigneVmax = new RelayCommand(param => OnCalculConsigneVmax(), param => true); } return calculConsigneVmax; } }
    //public void OnCalculConsigneVmax()
    //{
    //  for (int i = 0; i < 8; i++)
    //  {
    //    ConsigneAmplitude.Add(74);
    //    ConsigneVitesse.Add(Math.Round(ConsigneAmplitude[i] * ConsigneFrequence[i] * Math.PI));
    //  }
    //}

   
    #endregion

    #region Gestion de l'affichage des pages
    // renseignement du nombre de page
    public int NbPages = 4;
    private ObservableCollection<bool> activPages;
    public ObservableCollection<bool> ActivPages { get { return activPages; } set { activPages = value; OnPropertyChanged("ActivPages"); } }
    private ObservableCollection<string> visibleMenuBouton;
    public ObservableCollection<string> VisibleMenuBouton { get { return visibleMenuBouton; } set { visibleMenuBouton = value; OnPropertyChanged("VisibleMenuBouton"); } }
    private string titrePageActiv;
    public string TitrePageActiv { get => titrePageActiv; set { titrePageActiv = value; OnPropertyChanged("TitrePageActiv"); } }

    private RelayCommand changementPage;
    public ICommand ChangementPage
    {
      get
      {
        if (changementPage == null)
        {
          changementPage = new RelayCommand(param => OnChangementPage(param), param => true);
        }
        return changementPage;
      }
    }

    private void OnChangementPage(object param)
    {
      string PageDemadee = param.ToString();
      ActivPages = new ObservableCollection<bool>();
      VisibleMenuBouton = new ObservableCollection<string>();
      for (int i = 0; i < NbPages; i++)
      {
        ActivPages.Add(false);
        VisibleMenuBouton.Add("Hidden");
      }
      switch (PageDemadee)
      {
        case "Btn1":
          ActivPages[0] = true;
          TitrePageActiv = "Importation des mesures";

          break;
        case "Btn2":
          ActivPages[1] = true;
          TitrePageActiv = "Courbes efforts/déplacements";

          break;
        case "Btn3":
          ActivPages[2] = true;
          TitrePageActiv = "Dev";
          break;
        case "Btn4":
          ActivPages[3] = true;
          TitrePageActiv = "Paramètres";
          Journal = DateTime.Now.ToString("HH:mm") + " : Page paramètres ouverte" + "\n" + Journal;

          break;
        default:
          break;
      }
      for (int i = 0; i < NbPages; i++)
      {
        if (ActivPages[i])
        {
          VisibleMenuBouton[i] = "Visible";
        }
      }
    }
    #endregion

    #region Importation de la mesure

    private string nomFichierMesure;
    public string NomFichierMesure { get => nomFichierMesure; set { nomFichierMesure = value; OnPropertyChanged("NomFichierMesure"); } }
    MesureImportee mesureImportee;

    private RelayCommand importMeasure;
    public ICommand ImportMeasure { get { if (importMeasure == null) { importMeasure = new RelayCommand(param => OnImportMeasure(), param => true); } return importMeasure; } }
    public void OnImportMeasure()
    {
      var ofd = new System.Windows.Forms.OpenFileDialog
      {
        Multiselect = false,
        Filter = "Fichier mesure (*.csv)|*.csv",
        Title = "Sélectionner le fichier mesure",
        CheckFileExists = true
      };

      if (ofd.ShowDialog() == DialogResult.OK)
      {
        NomFichierMesure = Path.GetFileNameWithoutExtension(ofd.FileName); //On inscrit le nom du fichier dans l'affichage
        mesureImportee = new MesureImportee();

        //mesureImportee.OffsetConsigne = OffsetConsigne;
        mesureImportee.ImportationMesure(ofd.FileName);
        //On récupère l'offset consigne calculé
        OffsetConsigne=mesureImportee.OffsetConsigne;

        for (int i=0; i < mesureImportee.ListeSinus.Count; i++)
        {
          mesureImportee.ListeSinus[i].Amplitude = ConsigneAmplitude[i];
          mesureImportee.ListeSinus[i].Fréquence = ConsigneFrequence[i];
          mesureImportee.ListeSinus[i].VitesseMax = ConsigneVitesse[i];
          mesureImportee.ListeSinus[i].ToleranceDetenteMin = ToleranceDetenteMin[i];
          mesureImportee.ListeSinus[i].ToleranceDetenteMax = ToleranceDetenteMax[i];
          mesureImportee.ListeSinus[i].ToleranceCompressionMin = ToleranceCompressionMin[i];
          mesureImportee.ListeSinus[i].ToleranceCompressionMax = ToleranceCompressionMax[i];
        }
        mesureImportee.CalculLEV();
        ResultatsLEVMesure = new ObservableCollection<double>();
        ConformiteParPoint = new ObservableCollection<string>();
        ResultatLEVACopier = "";
        for (int i = 0; i < mesureImportee.ListeSinus.Count*2+1; i++)
        {
          ConformiteParPoint.Add("Black");
          ResultatsLEVMesure.Add(mesureImportee.LEVMesure[i]);
          ResultatLEVACopier = ResultatLEVACopier + mesureImportee.LEVMesure[i].ToString() + "\t";
          if (i < mesureImportee.ListeSinus.Count)
          {
            if (mesureImportee.ListeSinus[mesureImportee.ListeSinus.Count-1 - i].CompressionConforme)
            {
              ConformiteParPoint[i] = "Green";
            }
            else
            {
              ConformiteParPoint[i] = "Red";
            }
          }
          if (i > mesureImportee.ListeSinus.Count)
          {
            if (mesureImportee.ListeSinus[i- (mesureImportee.ListeSinus.Count+1)].DetenteConforme)
            {
              ConformiteParPoint[i] = "Green";
            }
            else
            {
              ConformiteParPoint[i] = "Red";
            }
          }
        }
        // Check conformité
        mesureImportee.Conformite = true;
        for (int i = 0; i < mesureImportee.ListeSinus.Count; i++)
        {
          if(!mesureImportee.ListeSinus[i].CompressionConforme || !mesureImportee.ListeSinus[i].DetenteConforme)
          {
            mesureImportee.Conformite = false;
          }
        }
        if (mesureImportee.Conformite)
        {
          Conformite = "Conforme";
          ConformiteCouleur = "Green";
        }
        else
        {
          Conformite = "Non Conforme";
          ConformiteCouleur = "Red";
        }

        TableauToleranceVitesseB = new double[mesureImportee.ListeSinus.Count*2+1];
        for (int i = 0; i < mesureImportee.ListeSinus.Count*2+1; i++)
        {
          if (i < mesureImportee.ListeSinus.Count)
          {
            TableauToleranceVitesseB[i] = -ConsigneVitesse[mesureImportee.ListeSinus.Count-1 - i];
            TableauToleranceMin[i] = ToleranceCompressionMin[mesureImportee.ListeSinus.Count-1 - i];
            TableauToleranceMax[i] = ToleranceCompressionMax[mesureImportee.ListeSinus.Count-1 - i];
          }
          else if (i == mesureImportee.ListeSinus.Count)
          {
            TableauToleranceVitesseB[i] = 0;
            TableauToleranceMin[i] = 0;
            TableauToleranceMax[i] = 0;
          }
          else
          {
            TableauToleranceVitesseB[i] = ConsigneVitesse[i - (mesureImportee.ListeSinus.Count+1)];
            TableauToleranceMin[i] = ToleranceDetenteMin[i - (mesureImportee.ListeSinus.Count+1)];
            TableauToleranceMax[i] = ToleranceDetenteMax[i - (mesureImportee.ListeSinus.Count+1)];
          }
        }

        AfficherLEVMesure();
        Journal = DateTime.Now.ToString("HH:mm") + " : Le fichier " + NomFichierMesure + "à été chargé, il contient " + mesureImportee.NombreLigne + " lignes." + "\n" + Journal;
      }

    }

    #endregion

    #region Gestion du graph LEV de la courbe importée

    private Graphique graphLEVMesure;
    public Graphique GraphLEVMesure { get => graphLEVMesure; set { graphLEVMesure = value; OnPropertyChanged("GraphLEVMesure"); } }
    private ObservableCollection<Graphique> graphSinus;
    public ObservableCollection<Graphique> GraphSinus { get => graphSinus; set { graphSinus = value; OnPropertyChanged("GraphSinus"); } }
   

    private void AfficherLEVMesure()
    {
      GraphLEVMesure = new Graphique();

      GraphLEVMesure.Graph.plt.PlotScatter(TableauToleranceVitesse, TableauToleranceMin, label: "LEV", markerSize: 5, markerShape: ScottPlot.MarkerShape.openCircle, color: System.Drawing.Color.OrangeRed);
      GraphLEVMesure.Graph.plt.PlotScatter(TableauToleranceVitesse, TableauToleranceMax, label: "LEV", markerSize: 5, markerShape: ScottPlot.MarkerShape.openCircle, color: System.Drawing.Color.OrangeRed);

      double[] Abscisses = new double[mesureImportee.NombreLigne - 2];
      double[] Ordonnees = new double[mesureImportee.NombreLigne - 2];
      for (int i = 1; i < mesureImportee.NombreLigne - 1; i++)
      {
      Abscisses[i - 1] = mesureImportee.MesuresBrutes[i, 0];
      Ordonnees[i - 1] = mesureImportee.MesuresBrutes[i, 5];        
      }
      GraphLEVMesure.Graph.plt.PlotScatter(TableauToleranceVitesseB, mesureImportee.LEVMesure, label: "LEV", markerSize: 0);
      //for (int i = 0; i < mesureImportee.NumeroSinus; i++)
      //{
      //  GraphLEVMesure.Graph.plt.PlotScatter(mesureImportee.ListeSinus[i].Temps, mesureImportee.ListeSinus[i].Course, label: mesureImportee.ListeSinus[i].NomSinus, markerSize: 0);
      //}
      ConfigGraph(GraphLEVMesure,"LEV","Vitesse (mm/s)","Effort (N)");
      GraphLEVMesure.Graph.Render();

      GraphSinus = new ObservableCollection<Graphique>();
      
      for (int i = 0; i < mesureImportee.ListeSinus.Count; i++)
      {
        Graphique graphTampon = new Graphique();
        GraphSinus.Add(graphTampon);
        GraphSinus[i].Graph.plt.PlotScatter(mesureImportee.ListeSinus[i].Course, mesureImportee.ListeSinus[i].Effort, label: mesureImportee.ListeSinus[i].NomSinus, markerSize: 0);
        ConfigGraph(GraphSinus[i], mesureImportee.ListeSinus[i].NomSinus);
        GraphSinus[i].Graph.Render();
      }



      Journal = DateTime.Now.ToString("HH:mm") + " : La moyenne d'effort est de : " + mesureImportee.testOffsetConsigne + " Course offset : " + mesureImportee.CourseOffset + " Nombre de sinus : " + mesureImportee.ListeSinus[0].EffortMin() + "\n" + Journal;
    }

    #endregion

    private void ConfigGraph(Graphique graphique,string titre,string xtitre,string ytitre)
    {
      graphique.Graph.plt.Style(figBg: System.Drawing.Color.Transparent);
      graphique.Graph.plt.Style(dataBg: System.Drawing.Color.Transparent);
      graphique.Graph.plt.Frame(left: true, bottom: true, top: false, right: false);
      graphique.Graph.plt.Grid(color: System.Drawing.Color.DarkGray, lineStyle: ScottPlot.LineStyle.Dot);
      //graphique.Graph.plt.Legend(backColor: System.Drawing.Color.WhiteSmoke);
      graphique.Graph.plt.Title(titre);
      graphique.Graph.plt.YLabel(ytitre);
      graphique.Graph.plt.XLabel(xtitre);
    }
    private void ConfigGraph(Graphique graphique, string titre)
    {
      graphique.Graph.plt.Style(figBg: System.Drawing.Color.Transparent);
      graphique.Graph.plt.Style(dataBg: System.Drawing.Color.Transparent);
      graphique.Graph.plt.Frame(left: true, bottom: true, top: false, right: false);
      graphique.Graph.plt.Grid(color: System.Drawing.Color.DarkGray, lineStyle: ScottPlot.LineStyle.Dot);
      //graphique.Graph.plt.Legend(backColor: System.Drawing.Color.WhiteSmoke);
      graphique.Graph.plt.Title(title: titre,fontSize: 12);
      //graphique.Graph.plt.YLabel(ytitre);
      //graphique.Graph.plt.XLabel(xtitre);
    }

    private RelayCommand copieResultatLEV;
    public ICommand CopieResultatLEV { get { if (copieResultatLEV == null) { copieResultatLEV = new RelayCommand(param => OnCopieResultatLEV(), param => true); } return copieResultatLEV; } }
    public void OnCopieResultatLEV()
    {
      System.Windows.Clipboard.SetDataObject(ResultatLEVACopier);
    }


    ////////////////////////////Partie DEV
    /// <summary>
    /// 
    /// 
    /// </summary>


    private ObservableCollection<Consigne> cycles;
    public ObservableCollection<Consigne> Cycles { get { return cycles; } set { cycles = value; OnPropertyChanged("Cycles"); } }

    private double nombresCycles;
    public double NombresCycles { get => nombresCycles; set { nombresCycles = value; OnPropertyChanged("NombresCycles"); } }
    private double sommeCycles;
    public double SommeCycles { get => sommeCycles; set { sommeCycles = value; OnPropertyChanged("SommeCycles"); } }
    private string notificationText;
    public string NotificationText { get => notificationText; set { notificationText = value; OnPropertyChanged("NotificationText"); } }
    private string isLoading;
    public string IsLoading { get => isLoading; set { isLoading = value; OnPropertyChanged("IsLoading"); } }
    private double notificationHeight;
    public double NotificationHeight { get => notificationHeight; set { notificationHeight = value; OnPropertyChanged("NotificationHeight"); } }

    //Test tableau dynamique
    private RelayCommand calculConsigne;
    public ICommand CalculConsigne { get { if (calculConsigne == null) { calculConsigne = new RelayCommand(param => OnCalculConsigne(), param => true); } return calculConsigne; } }
    //async Task permet de gérer le délai de la notification
    public void OnCalculConsigne()
    {
      Cycles = new ObservableCollection<Consigne>();
      for (int i = 0; i < NombresCycles; i++)
      {
        Consigne consigne = new Consigne();
        Cycles.Add(consigne);
        Cycles[i].Id = i;
        Cycles[i].Vitesse = i * 10;
      }
      
      _ = Notification("Ajout du nombre de cycles");
      
    }

    private RelayCommand sommeVitesse;
    public ICommand SommeVitesse { get { if (sommeVitesse == null) { sommeVitesse = new RelayCommand(param => OnSommeVitesse(), param => true); } return sommeVitesse; } }
    public void OnSommeVitesse()
    {
      SommeCycles = 0;
      for (int i = 0; i < NombresCycles; i++)
      {
        SommeCycles = SommeCycles + Cycles[i].Vitesse;
        
      }
    }

    public async Task Notification(string text)
    {
      NotificationText = text;
      IsLoading = "Visible";      
      NotificationHeight = 0;
      for(int i = 0; i < 25; i++)
      {
        NotificationHeight = 2*i;
        await Task.Delay(1);

      }
      await Task.Delay(2500);
      for (int i = 0; i < 25; i++)
      {
        NotificationHeight = 50-2 * i;
        await Task.Delay(1);

      }
      IsLoading = "Hidden";
    }


  }

  



  class Consigne : INotifyPropertyChanged
  {
    #region Mécanisme INotifyPropertyChanged
    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    #endregion

    private double id;
    public double Id { get => id; set { id = value; OnPropertyChanged("Id"); } }
    private double vitesse;
    public double Vitesse { get => vitesse; set { vitesse = value; OnPropertyChanged("Vitesse"); } }

  }




}
